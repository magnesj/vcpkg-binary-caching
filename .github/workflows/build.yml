name: Build with vcpkg binary cache

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}

    env: 
      USERNAME: magnesj
      VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/magnesj/index.json,readwrite"

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Bootstrap vcpkg
      if: runner.os == 'Windows'
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV

    - name: Bootstrap vcpkg (Linux)
      if: runner.os == 'Linux'
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV        
        sudo apt install mono-complete
    
    - name: Configure NuGet for binary caching (Linux)
      if: runner.os == 'Linux'
      run: |
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          sources add \
          -Source "${{ env.FEED_URL }}" \
          -StorePasswordInClearText \
          -Name GitHubPackages \
          -UserName "${{ env.USERNAME }}" \
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
          -Source "${{ env.FEED_URL }}"
        
    - name: Add NuGet sources (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"
          
    - name: Create build directory
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release
      
    - name: Run application (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/build
      run: .\Release\vcpkg-example.exe
      
    - name: Run application (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/build
      run: ./vcpkg-example
