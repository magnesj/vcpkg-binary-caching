name: Build with vcpkg binary cache

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: TAServers/vcpkg-cache@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }} # Used by @actions/github to read the cache entries in your repo prefixed with `vcpkg/`. Couldn't see a way with just `@actions/cache` to pull everything without needing a token        
    
    - name: Bootstrap vcpkg
      if: runner.os == 'Windows'
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.bat

    - name: Bootstrap vcpkg (Linux)
      if: runner.os == 'Linux'
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.sh
    
    - name: Restore vcpkg cache
      id: vcpkg-cache
      uses: TAServers/vcpkg-cache@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create build directory
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Configure CMake
      env:
        VCPKG_FEATURE_FLAGS: "binarycaching" # Possibly redundant, but explicitly sets the binary caching feature flag
        VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
      working-directory: ${{github.workspace}}/build
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config Release
      
    - name: Run application (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/build
      run: .\Release\vcpkg-example.exe
      
    - name: Run application (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/build
      run: ./vcpkg-example
